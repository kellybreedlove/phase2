from PyCamellia import *

def steadyLinearSolutionInit(spaceDim, Re, dims, numElements, polyOrder):
    x0 = [0.,0.]
    meshTopo = MeshFactory.rectilinearMeshTopology(dims,numElements,x0)
    delta_k = 1
    mu = 1.0
    useConformingTraces = True
    
    form = StokesVGPFormulation(spaceDim,useConformingTraces,mu)
    form.initializeSolution(meshTopo,polyOrder,delta_k)
    form.addZeroMeanPressureCondition()

    return form

def steadyLinearAddWall(form, newWall):
    form.addWallCondition(newWall)
    return form

def steadyLinearAddInflow(form, newInflow):
    #form.addInflowCondition(topBoundary,topVeloci)
    return form

def steadyLinearAddOutflow(form, newOutflow):
    #form.addOutflowCondition()
    return form

def steadyLinearSolve(form):
    refinementNumber = 0
    form.solve()
    
    mesh = form.solution().mesh();
    
    energyError = form.solution().energyErrorTotal()
    elementCount = mesh.numActiveElements()
    globalDofCount = mesh.numGlobalDofs()
    print("Initial mesh has %i elements and %i degrees of freedom." % (elementCount, globalDofCount))
    print("Energy error after %i refinements: %0.3f" % (refinementNumber, energyError))

    print out per-cell energy error for cells with energy error > 0.01:
    perCellError = form.solution().energyErrorPerCell()
    for cellID in perCellError:
        if perCellError[cellID] > .01:
            print("Energy error for cell %i: %0.3f" % (cellID, perCellError[cellID]))
